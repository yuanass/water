#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('watermelon-v1:server');
var http = require('http');
var socketIo = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = new socketIo(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

app.get("/client1", function (req, res, next) {
  res.sendFile(__dirname + "../routes/testPage/client2.html");
  //__dirname: 全局变量，储存的是文件所在的文件目录
  //__filename: 全局变量，储存的是文件名
  console.log('1');
});
//客户端 2 的访问地址
app.get("/client2", function (req, res, next) {
  res.sendFile(__dirname + "../routes/testPage/client1.html");
  console.log('2');
});

// server.listen(8080);//express 监听 8080 端口，因为本机80端口已被暂用

//每个客户端socket连接时都会触发 connection 事件
io.on("connection", function (clientSocket) {
  // socket.io 使用 emit(eventname,data) 发送消息，使用on(eventname,callback)监听消息

  //监听客户端发送的 sendMsg 事件
  clientSocket.on("sendMsg", function (data) {
    // data 为客户端发送的消息，可以是 字符串，json对象或buffer

    // 使用 emit 发送消息，broadcast 表示 除自己以外的所有已连接的socket客户端。
    clientSocket.broadcast.emit("receiveMsg", data);
  })
});

function normalizePort (val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
